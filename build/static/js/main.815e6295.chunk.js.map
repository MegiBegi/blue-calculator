{"version":3,"sources":["redux/actions/index.ts","serviceWorker.ts","utils/index.ts","redux/reducers/index.ts","redux/store/index.ts","index.tsx"],"names":["GET_RESULT","PROVIDE_INPUT","USED_PLUS","ZERO","RESET","getResult","type","provideInput","digit","payload","usedPlus","zero","reset","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","getSum","input","firstNum","secondNum","elementsArr","split","pluses","reducedArray","forEach","el","push","plusesL","length","index","plusInd","findIndex","Number","join","LoaderWrapper","styled","div","initialState","displayed","tooMuch","mainReducer","action","avoidMultiplyZeros","includes","startsWith","MAX_INPUT_LENGTH","theFinalState","properScenario","plusesOverload","endsWith","verifiedState","updatedState","addZero","digits","result","toString","persistConfig","key","storage","persistedReducer","persistReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistor","persistStore","dispatch","App","React","lazy","fallback","active","ReactDOM","render","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.815e6295.chunk.js","sourcesContent":["export const GET_RESULT = \"GET RESULT\"\nexport const PROVIDE_INPUT = \"PROVIDE INPUT\"\nexport const USED_PLUS = \"USED PLUS\"\nexport const ZERO = \"ZERO\"\nexport const RESET = \"RESET\"\n\ninterface GetResult {\n  type: \"GET RESULT\"\n}\n\ninterface ProvideInput {\n  type: \"PROVIDE INPUT\"\n  payload: {\n    digit: string\n  }\n}\n\ninterface UsedPlus {\n  type: \"USED PLUS\"\n}\n\ninterface Zero {\n  type: \"ZERO\"\n}\n\ninterface Reset {\n  type: \"RESET\"\n}\n\nexport type Actions = GetResult | ProvideInput | UsedPlus | Zero | Reset\n\nexport const getResult = (): GetResult => ({\n  type: GET_RESULT\n})\n\nexport const provideInput = (digit: string): ProvideInput => ({\n  type: PROVIDE_INPUT,\n  payload: {\n    digit\n  }\n})\n\nexport const usedPlus = (): UsedPlus => ({\n  type: USED_PLUS\n})\n\nexport const zero = (): Zero => ({\n  type: ZERO\n})\n\nexport const reset = (): Reset => ({\n  type: RESET\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { findIndex, join } from \"ramda\"\nimport styled from \"styled-components\"\n\nexport const getSum = (input: string): number => {\n  const firstNum: string[] = []\n  const secondNum: string[] = []\n  const elementsArr: string[] = input.split(\"\")\n  const pluses: string[] = []\n  const reducedArray: string[] = []\n\n  elementsArr.forEach((el: string): void => {\n    el === \"+\" && pluses.push(el)\n  })\n\n  const plusesL: number = pluses.length\n  plusesL > 1 &&\n    elementsArr.forEach((el: string, index: number): void => {\n      if (index < elementsArr.length - 2) reducedArray.push(el)\n    })\n\n  const plusInd = findIndex(\n    (el: string): boolean => el === \"+\",\n    plusesL > 1 ? reducedArray : elementsArr\n  )\n\n  let currentArray: string[]\n  plusesL > 1 ? (currentArray = reducedArray) : (currentArray = elementsArr)\n\n  currentArray.forEach((el: string, index: number): void => {\n    if (index < plusInd) firstNum.push(el)\n    if (index > plusInd) secondNum.push(el)\n  })\n\n  return Number(join(\"\", firstNum)) + Number(join(\"\", secondNum))\n}\n\nexport const LoaderWrapper = styled.div`\n  width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  [class*=\"loader-inner\"] {\n    div:nth-child(odd) {\n      background-color: #a91548;\n    }\n\n    div:nth-child(even) {\n      background: #0095b8;\n    }\n  }\n`\n","import { endsWith, split, includes } from \"ramda\"\nimport {\n  Actions,\n  GET_RESULT,\n  PROVIDE_INPUT,\n  USED_PLUS,\n  ZERO,\n  RESET\n} from \"redux/actions\"\nimport { getSum } from \"utils\"\n\nexport interface RootState {\n  displayed: string\n  tooMuch: boolean\n}\n\nexport const initialState: RootState = {\n  displayed: \"\",\n  tooMuch: false\n}\n\nconst mainReducer = (state: RootState = initialState, action: Actions) => {\n  const { displayed } = state\n  const tooMuch = {\n    ...state,\n    displayed: \"Too much!!!\",\n    tooMuch: true\n  }\n  const avoidMultiplyZeros =\n    includes(\"+\", displayed) && split(\"+\", displayed)[1].startsWith(\"0\")\n  const MAX_INPUT_LENGTH = 11\n  switch (action.type) {\n    case PROVIDE_INPUT:\n      if (avoidMultiplyZeros) return state\n      const theFinalState =\n        displayed.length < MAX_INPUT_LENGTH\n          ? { ...state, displayed: displayed + action.payload.digit }\n          : tooMuch\n\n      return theFinalState\n\n    case USED_PLUS:\n      const properScenario = {\n        ...state,\n        displayed: displayed + \"+\"\n      }\n      const plusesOverload = endsWith(\"+\", displayed) ? state : properScenario\n      return plusesOverload\n\n    case ZERO:\n      const verifiedState = avoidMultiplyZeros\n        ? state\n        : {\n            ...state,\n            displayed: displayed + \"0\"\n          }\n      const updatedState =\n        displayed.length >= MAX_INPUT_LENGTH ? tooMuch : verifiedState\n      return updatedState\n\n    case GET_RESULT:\n      const addZero = displayed + \"0\"\n      const digits = endsWith(\"+\", displayed) ? addZero : displayed\n      const result = getSum(digits).toString()\n      return {\n        ...state,\n        displayed: result\n      }\n    case RESET:\n      return initialState\n    default:\n      return state\n  }\n}\n\nexport default mainReducer\n","import { createStore, compose } from \"redux\"\nimport { persistStore, persistReducer } from \"redux-persist\"\nimport storage from \"redux-persist/lib/storage\"\nimport mainReducer from \"redux/reducers\"\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, mainReducer)\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nexport const store = createStore(persistedReducer, composeEnhancers())\nexport let persistor = persistStore(store)\n\nexport const dispatch = store.dispatch\n","import React, { Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport * as serviceWorker from \"serviceWorker\"\nimport { Provider } from \"react-redux\"\nimport { store, persistor } from \"redux/store\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport Loader from \"react-loaders\"\nimport { LoaderWrapper } from \"utils\"\nimport \"loaders.css/src/animations/line-scale-pulse-out.scss\"\n\nconst loaderType = \"line-scale-pulse-out\"\n\nconst App = React.lazy((): Promise<any> => import(\"app\"))\n\nconst fallback = (\n  <LoaderWrapper>\n    <Loader active type={loaderType} />\n  </LoaderWrapper>\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Suspense fallback={fallback}>\n        <App />\n      </Suspense>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}